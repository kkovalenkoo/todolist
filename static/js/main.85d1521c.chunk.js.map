{"version":3,"sources":["api/todolists-api.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","utils/error-utils.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx","app/App.module.css"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","status","error","setAppErrorAC","type","setAppStatusAC","handleServerError","data","dispatch","messages","length","handleNetworkError","message","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","description","priority","startDate","deadline","then","res","resultCode","updateTaskAC","catch","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","todolist","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","thunk","taskTitle","item","addTaskTC","removeTaskAC","removeTaskTC","changeStatus","addTodolist","addTodolistTC","changeTodolistStatusAC","removeTodolistAC","deleteTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","action","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","Alert","elevation","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","linearProgress","LinearProgress","Container","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.85d1521c.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8984ca38-6e26-4fb2-a385-4373d690c5de'\r\n    }\r\n})\r\n\r\n//API\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n//Types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","const initialState = {\r\n    status: 'idle' as StatusType,\r\n    error: null as ErrorType\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const setAppErrorAC = (error: ErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: StatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\n\r\n//Types\r\nexport type AppStateType = typeof initialState\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppStatusAC, StatusType} from '../../app/app-reducer'\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', status: 'idle'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, status: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', status: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const addTodolistAC = (todolist: TodolistType) => ({\r\n    type: 'ADD-TODOLIST', todolist\r\n} as const)\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'REMOVE-TODOLIST', id\r\n} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n} as const)\r\nexport const changeTodolistStatusAC = (id: string, status: StatusType) => ({\r\n    type: 'CHANGE-TODOLIST-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({\r\n    type: 'SET-TODOLISTS', todolists\r\n} as const)\r\n\r\n//Thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    return todolistsAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n}\r\nexport const deleteTodolistTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistStatusAC(id, 'loading'))\r\n    todolistsAPI.deleteTodolist(id)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(removeTodolistAC(id))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(() => dispatch(changeTodolistTitleAC(id, title)))\r\n}\r\n\r\n//Types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, status: StatusType }\r\ntype ActionsType =\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistStatusAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) dispatch(setAppErrorAC(data.messages[0]))\r\n    else dispatch(setAppErrorAC('some error'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'some error'))\r\n}\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)\r\n            }\r\n        case 'SET-TASK':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => ({\r\n    type: 'REMOVE-TASK', todolistId, taskId\r\n} as const)\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: 'ADD-TASK', task\r\n} as const)\r\nexport const updateTaskAC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskType) => ({\r\n    type: 'UPDATE-TASK', todolistId, taskId, domainModel\r\n} as const)\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => ({\r\n    type: 'SET-TASK', tasks, todolistId\r\n} as const)\r\n\r\n//Thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistsAPI.createTask(todolistId, taskTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(addTaskAC(res.data.data.item))\r\n            } else {\r\n                handleServerError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    return todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => dispatch(removeTaskAC(todolistId, taskId)))\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                status: task.status,\r\n                title: task.title,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...domainModel\r\n            }\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) dispatch(updateTaskAC(todolistId, taskId, domainModel))\r\n                    else {\r\n                        handleServerError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    handleNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//Types\r\nexport type UpdateDomainTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = { [key: string]: TaskType[] }\r\ntype ActionsType =\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id),\r\n        [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.todolistId, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.todolistId, props.task.id, newValue)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.status === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.status === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}>All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n//Type\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    deleteTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(todolistId, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTask = useCallback(function (todolistId: string, taskId: string) {\r\n        const thunk = removeTaskTC(todolistId, taskId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback(function (todolistId: string, taskId: string, status: TaskStatuses) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {status})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback(function (todolistId: string, taskId: string, title: string) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = deleteTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\n//Type\r\ntype TodolistsListPropsType = { demo?: boolean }","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../app/store'\r\nimport {ErrorType, setAppErrorAC} from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, ErrorType>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {StatusType} from './app-reducer'\r\nimport style from './App.module.css'\r\n\r\nexport const App: React.FC<AppPropsType> = ({demo = false}) => {\r\n\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n                <ErrorSnackbar/>\r\n            </AppBar>\r\n            {status === 'loading' && <div className={style.linearProgress}><LinearProgress color=\"secondary\"/></div>}\r\n            <Container fixed>\r\n                <TodolistsList demo={demo}/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n//Type\r\nexport type AppPropsType = {demo?: boolean}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBarWrapper\":\"App_appBarWrapper__1YaDO\",\"linearProgress\":\"App_linearProgress__3BkLP\"};"],"sourceRoot":""}