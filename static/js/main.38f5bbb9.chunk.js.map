{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","onAddTask","trim","addTask","isIllumButtonAll","filter","isIllumButtonActive","isIllumButtonComplete","value","onChange","e","currentTarget","onKeyPress","key","onClick","className","tasks","map","t","id","isDone","type","checked","changeTaskStatus","removeTask","changeFilter","App","v1","setTasks","setFilter","taskForTodolist","newTaskTitle","newTask","taskId","filterValue","task","find","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.38f5bbb9.chunk.js","sourcesContent":["import React, {KeyboardEvent, ChangeEvent, useState} from 'react'\r\nimport {FilterType, TaskType} from './App'\r\n\r\ntype TodolistPropsType = {\r\n    title: string\r\n    filter: FilterType\r\n    tasks: TaskType[]\r\n    addTask: (newTaskTitle: string) => void\r\n    removeTask: (taskId: string) => void\r\n    changeFilter: (filterValue: FilterType) => void\r\n    changeTaskStatus: (id: string, isDone: boolean) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onAddTask = () => {\r\n        if(title.trim() != '') {\r\n            props.addTask(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTask()\r\n        }\r\n    }\r\n    const onClickAll = () => {\r\n        props.changeFilter('all')\r\n    }\r\n    const onClickActive = () => {\r\n        props.changeFilter('active')\r\n    }\r\n    const onClickCompleted = () => {\r\n        props.changeFilter('completed')\r\n    }\r\n\r\n    const isIllumButtonAll = props.filter === 'all' ? 'active-filter' : ''\r\n    const isIllumButtonActive = props.filter === 'active' ? 'active-filter' : ''\r\n    const isIllumButtonComplete = props.filter === 'completed' ? 'active-filter' : ''\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}</h3>\r\n            <div>\r\n                <input value={title} onChange={onChangeTitle} onKeyPress={onKeyPress}/>\r\n                <button onClick={onAddTask}>+</button>\r\n                {error && <div className={'error-message'}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onRemoveTask = () => {\r\n                            props.removeTask(t.id)\r\n                        }\r\n                        const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked)\r\n                        }\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                <input type=\"checkbox\" checked={t.isDone} onChange={onChangeStatus}/>\r\n                                <span>{t.title}</span>\r\n                                <button onClick={onRemoveTask}>x</button>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={isIllumButtonAll} onClick={onClickAll}>All</button>\r\n                <button className={isIllumButtonActive} onClick={onClickActive}>Active</button>\r\n                <button className={isIllumButtonComplete} onClick={onClickCompleted}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './Todolist'\r\nimport {v1} from 'uuid'\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n\r\n    const [tasks, setTasks] = useState<TaskType[]>([\r\n        {id: v1(), title: 'HTML&CSS', isDone: true},\r\n        {id: v1(), title: 'JS', isDone: true},\r\n        {id: v1(), title: 'React', isDone: false}\r\n    ])\r\n\r\n    const [filter, setFilter] = useState<FilterType>('all')\r\n\r\n    const addTask = (newTaskTitle: string) => {\r\n        const newTask: TaskType = {id: v1(), title: newTaskTitle, isDone: false}\r\n        setTasks([newTask, ...tasks])\r\n    }\r\n    const removeTask = (taskId: string) => {\r\n        return setTasks(tasks.filter(t => t.id !== taskId))\r\n    }\r\n    const changeFilter = (filterValue: FilterType) => {\r\n        setFilter(filterValue)\r\n    }\r\n    const changeTaskStatus = (id: string, isDone: boolean) => {\r\n        const task = tasks.find(t => t.id === id)\r\n        if(task) {\r\n            task.isDone = isDone\r\n            setTasks([...tasks])\r\n        }\r\n    }\r\n\r\n    let taskForTodolist = tasks\r\n\r\n    if (filter === 'active') taskForTodolist = tasks.filter(t => !t.isDone)\r\n    if (filter === 'completed') taskForTodolist = tasks.filter(t => t.isDone)\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <Todolist title={'What to learn'}\r\n                      tasks={taskForTodolist}\r\n                      filter={filter}\r\n                      addTask={addTask}\r\n                      removeTask={removeTask}\r\n                      changeFilter={changeFilter}\r\n                      changeTaskStatus={changeTaskStatus}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}