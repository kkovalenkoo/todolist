{"version":3,"sources":["components/AddItemForm.tsx","components/EditableSpan.tsx","components/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","title","setTitle","error","setError","onAddTask","trim","addItem","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Todolist","changeTodolistTitle","todolistId","removeTodolist","Delete","addTask","tasks","map","t","id","className","isDone","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Button","filter","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","newTaskTitle","newTask","todolistTasks","taskId","filterValue","todolist","find","tl","task","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","component","Container","fixed","Grid","container","style","padding","newTodolistId","spacing","allTodolistTasks","item","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.4bda53c5.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\ntype AddItemFormType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport function AddItemForm(props: AddItemFormType) {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onAddTask = () => {\r\n        if (title.trim() !== '') {\r\n            props.addItem(title)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTask()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <TextField variant={'outlined'}\r\n                       value={title}\r\n                       onChange={onChangeTitle}\r\n                       onKeyPress={onKeyPress}\r\n                       error={!!error}\r\n                       label={'Title'}\r\n                       helperText={error}\r\n            />\r\n            <IconButton color={'primary'} onClick={onAddTask}>\r\n                <AddBox/>\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\ntype EditableSpanType = {\r\n    title: string\r\n    onChange: (newTitle: string) => void\r\n}\r\n\r\nexport function EditableSpan(props: EditableSpanType) {\r\n\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n    const [title, setTitle] = useState<string>(props.title)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(props.title)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => setTitle(e.currentTarget.value)\r\n\r\n    return editMode\r\n        ? <TextField variant={'outlined'} value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.title}</span>\r\n\r\n}","import React, {ChangeEvent} from 'react'\r\nimport {FilterType, TaskType} from '../App'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, Checkbox, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    filter: FilterType\r\n    tasks: TaskType[]\r\n    addTask: (newTaskTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (filterValue: FilterType, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, title: string) => void\r\n    changeTodolistTitle: (todolistId: string, title: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const addTask = (title: string) => {\r\n        props.addTask(title, props.todolistId)\r\n    }\r\n    const changeTodolistTitle = (title: string) => {\r\n        props.changeTodolistTitle(props.todolistId, title)\r\n    }\r\n    const removeTodolist = () => props.removeTodolist(props.todolistId)\r\n\r\n    const onClickAll = () => {\r\n        props.changeFilter('all', props.todolistId)\r\n    }\r\n    const onClickActive = () => {\r\n        props.changeFilter('active', props.todolistId)\r\n    }\r\n    const onClickCompleted = () => {\r\n        props.changeFilter('completed', props.todolistId)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <h3>\r\n                <EditableSpan title={props.title} onChange={changeTodolistTitle}/>\r\n                <IconButton onClick={removeTodolist}>\r\n                    <Delete/>\r\n                </IconButton>\r\n            </h3>\r\n            <AddItemForm addItem={addTask}/>\r\n            <div>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onRemoveTask = () => {\r\n                            props.removeTask(t.id, props.todolistId)\r\n                        }\r\n                        const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todolistId)\r\n                        }\r\n                        const changeTaskTitle = (title: string) => {\r\n                            props.changeTaskTitle(props.todolistId, t.id, title)\r\n                        }\r\n\r\n                        return (\r\n                            <div key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                <Checkbox color={'primary'} checked={t.isDone} onChange={onChangeStatus}/>\r\n                                <EditableSpan title={t.title} onChange={changeTaskTitle}/>\r\n                                <IconButton onClick={onRemoveTask}>\r\n                                    <Delete/>\r\n                                </IconButton>\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n            <div>\r\n                <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                        color={'default'}\r\n                        onClick={onClickAll}>All\r\n                </Button>\r\n                <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                        color={'primary'}\r\n                        onClick={onClickActive}>Active\r\n                </Button>\r\n                <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                        color={'secondary'}\r\n                        onClick={onClickCompleted}>Completed\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './components/Todolist'\r\nimport {v1} from 'uuid'\r\nimport {AddItemForm} from './components/AddItemForm'\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\n\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterType\r\n}\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n\r\n    const todolistId1 = v1()\r\n    const todolistId2 = v1()\r\n\r\n    const [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n        [todolistId1]: [\r\n            {id: v1(), title: 'HTML&CSS', isDone: true},\r\n            {id: v1(), title: 'JS', isDone: true},\r\n            {id: v1(), title: 'React', isDone: false}\r\n        ],\r\n        [todolistId2]: [\r\n            {id: v1(), title: 'Milk', isDone: true},\r\n            {id: v1(), title: 'Book', isDone: true},\r\n            {id: v1(), title: 'Pen', isDone: false}\r\n        ]\r\n    })\r\n\r\n    const addTask = (newTaskTitle: string, todolistId: string) => {\r\n        const newTask: TaskType = {id: v1(), title: newTaskTitle, isDone: false}\r\n        const todolistTasks = tasks[todolistId]\r\n        tasks[todolistId] = [newTask, ...todolistTasks]\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTask = (taskId: string, todolistId: string) => {\r\n        const todolistTasks = tasks[todolistId]\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeFilter = (filterValue: FilterType, todolistId: string) => {\r\n        const todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = filterValue\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todolistId: string) => {\r\n        const todolistTasks = tasks[todolistId]\r\n        const task = todolistTasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n    const changeTaskTitle = (todolistId: string, taskId: string, title: string) => {\r\n        const todolistTasks = tasks[todolistId]\r\n        const task = todolistTasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.title = title\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodolists(todolists.filter(tl => tl.id !== todolistId))\r\n        delete tasks[todolistId]\r\n        setTasks({...tasks})\r\n    }\r\n    const addTodolist = (title: string) => {\r\n        const newTodolistId = v1()\r\n        const newTodolist: TodolistType = {id: newTodolistId, title: title, filter: 'all'}\r\n        setTodolists([newTodolist, ...todolists])\r\n        setTasks({\r\n            ...tasks,\r\n            [newTodolistId]: []\r\n        })\r\n    }\r\n    const changeTodolistTitle = (todolistId: string, title: string) => {\r\n        const todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.title = title\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color={'inherit'}>Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: '20px'}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {todolists.map(tl => {\r\n\r\n                        let allTodolistTasks = tasks[tl.id]\r\n                        let todolistTasks = allTodolistTasks\r\n\r\n                        if (tl.filter === 'active') todolistTasks = allTodolistTasks.filter(t => !t.isDone)\r\n                        if (tl.filter === 'completed') todolistTasks = allTodolistTasks.filter(t => t.isDone)\r\n\r\n                        return (\r\n                            <Grid item>\r\n                                <Paper style={{padding: '10px'}}>\r\n                                    <Todolist key={tl.id}\r\n                                             todolistId={tl.id}\r\n                                             title={tl.title}\r\n                                             filter={tl.filter}\r\n                                             tasks={todolistTasks}\r\n                                             addTask={addTask}\r\n                                             removeTask={removeTask}\r\n                                             changeFilter={changeFilter}\r\n                                             changeTaskStatus={changeTaskStatus}\r\n                                             removeTodolist={removeTodolist}\r\n                                             changeTaskTitle={changeTaskTitle}\r\n                                             changeTodolistTitle={changeTodolistTitle}/>\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })}\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}