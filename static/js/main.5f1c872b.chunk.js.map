{"version":3,"sources":["api/todolists-api.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","components/Task.tsx","components/Todolist.tsx","state/todolists-reducer.ts","state/tasks-reducer.ts","App.tsx","reportWebVitals.ts","state/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","AddItemForm","React","memo","props","console","log","useState","title","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","axios","create","baseURL","withCredentials","headers","Task","onClickHandler","useCallback","removeTask","task","id","todolistId","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","status","Checkbox","Delete","Todolist","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","tasks","filter","t","removeTodolist","map","style","paddingTop","Button","initialState","App","todolists","useSelector","state","dispatch","useDispatch","action","taskId","type","removeTaskAC","addTaskAC","changeStatus","changeTaskStatusAC","newTitle","changeTaskTitleAC","changeTodolistTitleAC","addTodolist","v1","addTodolistAC","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","Grid","container","padding","spacing","tl","allTodolistTasks","item","Paper","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","stateCopy","newTask","todoListId","description","startDate","deadline","addedDate","order","priority","Low","todolistTasks","copyState","todolist","find","store","createStore","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5f1c872b.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8984ca38-6e26-4fb2-a385-4373d690c5de'\r\n    }\r\n})\r\n\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\n\r\ntype UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: number\r\n    priority: number\r\n    startDate: string\r\n    deadline: string\r\n}\r\n\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title: title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, taskTitle: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitle})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../api/todolists-api'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback} from 'react'\r\nimport {AddItemForm} from './AddItemForm'\r\nimport {EditableSpan} from './EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task'\r\nimport {TaskStatuses, TaskType} from '../api/todolists-api'\r\nimport {FilterValuesType} from '../state/todolists-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo(function (props: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                          removeTask={props.removeTask}\r\n                                          changeTaskTitle={props.changeTaskTitle}\r\n                                          changeTaskStatus={props.changeTaskStatus}\r\n                    />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {v1} from 'uuid'\r\nimport {TodolistType} from '../api/todolists-api'\r\n\r\ntype ActionsType = ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TODOLIST': {\r\n            return state.filter(tl => tl.id !== action.id)\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return [{\r\n                id: action.todolistId,\r\n                title: action.title,\r\n                filter: 'all',\r\n                addedDate: '',\r\n                order: 0\r\n            }, ...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-TITLE': {\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.title = action.title\r\n            }\r\n            return [...state]\r\n        }\r\n        case 'CHANGE-TODOLIST-FILTER': {\r\n            const todolist = state.find(tl => tl.id === action.id)\r\n            if (todolist) {\r\n                // если нашёлся - изменим ему заголовок\r\n                todolist.filter = action.filter\r\n            }\r\n            return [...state]\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTodolistAC = (todolistId: string) => ({\r\n    type: 'REMOVE-TODOLIST', id: todolistId\r\n} as const)\r\nexport const addTodolistAC = (title: string) => ({\r\n    type: 'ADD-TODOLIST', title: title, todolistId: v1()\r\n} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id: id, title: title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id: id, filter: filter\r\n} as const)\r\n\r\n","import {TasksStateType} from '../App'\r\nimport {v1} from 'uuid'\r\nimport {TaskPriorities, TaskStatuses, TaskType} from '../api/todolists-api'\r\nimport {addTodolistAC, removeTodolistAC} from './todolists-reducer'\r\n\r\ntype ActionsType = ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof changeTaskStatusAC>\r\n    | ReturnType<typeof changeTaskTitleAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'REMOVE-TASK': {\r\n            const stateCopy = {...state}\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = tasks.filter(t => t.id !== action.taskId)\r\n            return stateCopy\r\n        }\r\n        case 'ADD-TASK': {\r\n            const stateCopy = {...state}\r\n            const newTask: TaskType = {\r\n                id: v1(),\r\n                title: action.title,\r\n                status: TaskStatuses.New,\r\n                todoListId: action.todolistId, description: '',\r\n                startDate: '', deadline: '', addedDate: '', order: 0, priority: TaskPriorities.Low\r\n            }\r\n            const tasks = stateCopy[action.todolistId]\r\n            stateCopy[action.todolistId] = [newTask, ...tasks]\r\n            return stateCopy\r\n        }\r\n        case 'CHANGE-TASK-STATUS': {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, status: action.status} : t)\r\n            return ({...state})\r\n        }\r\n        case 'CHANGE-TASK-TITLE': {\r\n            let todolistTasks = state[action.todolistId]\r\n            state[action.todolistId] = todolistTasks\r\n                .map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n            return ({...state})\r\n        }\r\n        case 'ADD-TODOLIST': {\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: []\r\n            }\r\n        }\r\n        case 'REMOVE-TODOLIST': {\r\n            const copyState = {...state}\r\n            delete copyState[action.id]\r\n            return copyState\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const removeTaskAC = (taskId: string, todolistId: string) => ({\r\n    type: 'REMOVE-TASK', taskId: taskId, todolistId: todolistId\r\n} as const)\r\nexport const addTaskAC = (title: string, todolistId: string) => ({\r\n    type: 'ADD-TASK', title, todolistId\r\n} as const)\r\nexport const changeTaskStatusAC = (taskId: string, status: TaskStatuses, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-STATUS', status, todolistId, taskId\r\n} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, todolistId: string) => ({\r\n    type: 'CHANGE-TASK-TITLE', title, todolistId, taskId\r\n} as const)\r\n\r\n","import React, {useCallback} from 'react'\r\nimport {Todolist} from './components/Todolist';\r\nimport {AddItemForm} from './components/AddItemForm';\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from '@material-ui/core';\r\nimport {Menu} from '@material-ui/icons';\r\nimport {\r\n    addTodolistAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleAC,\r\n    FilterValuesType,\r\n    removeTodolistAC,\r\n    TodolistDomainType\r\n} from './state/todolists-reducer'\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from './state/tasks-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from './state/store';\r\nimport {TaskStatuses, TaskType} from './api/todolists-api'\r\n\r\n\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch();\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const action = removeTaskAC(id, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const action = addTaskAC(title, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const action = changeTaskStatusAC(id, status, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const action = changeTaskTitleAC(id, newTitle, todolistId);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const action = removeTodolistAC(id);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const action = changeTodolistTitleAC(id, title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const action = addTodolistAC(title);\r\n        dispatch(action);\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding: \"20px\"}}>\r\n                    <AddItemForm addItem={addTodolist}/>\r\n                </Grid>\r\n                <Grid container spacing={3}>\r\n                    {\r\n                        todolists.map(tl => {\r\n                            let allTodolistTasks = tasks[tl.id];\r\n\r\n                            return <Grid item key={tl.id}>\r\n                                <Paper style={{padding: \"10px\"}}>\r\n                                    <Todolist\r\n                                        id={tl.id}\r\n                                        title={tl.title}\r\n                                        tasks={allTodolistTasks}\r\n                                        removeTask={removeTask}\r\n                                        changeFilter={changeFilter}\r\n                                        addTask={addTask}\r\n                                        changeTaskStatus={changeStatus}\r\n                                        filter={tl.filter}\r\n                                        removeTodolist={removeTodolist}\r\n                                        changeTaskTitle={changeTaskTitle}\r\n                                        changeTodolistTitle={changeTodolistTitle}\r\n                                    />\r\n                                </Paper>\r\n                            </Grid>\r\n                        })\r\n                    }\r\n                </Grid>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from './tasks-reducer'\r\nimport {todolistsReducer} from './todolists-reducer'\r\nimport {combineReducers, createStore} from 'redux'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\nexport const store = createStore(rootReducer)\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './state/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}