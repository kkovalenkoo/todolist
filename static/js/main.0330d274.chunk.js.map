{"version":3,"sources":["api/todolists-api.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","app/App.tsx","reportWebVitals.ts","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","initialState","updateTaskTC","domainModel","dispatch","getState","task","tasks","find","t","apiModel","status","description","priority","startDate","deadline","then","type","updateTaskAC","AddItemForm","React","memo","props","console","log","useState","setTitle","error","setError","addItem","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","useDispatch","useEffect","res","setTasksAC","data","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","thunk","taskTitle","item","addTaskTC","removeTaskAC","removeTaskTC","changeStatus","addTodolist","todolist","addTodolistTC","removeTodolistAC","deleteTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","action","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0330d274.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8984ca38-6e26-4fb2-a385-4373d690c5de'\r\n    }\r\n})\r\n\r\n//API\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n//Types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const addTodolistAC = (todolist: TodolistType) => ({\r\n    type: 'ADD-TODOLIST', todolist\r\n} as const)\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'REMOVE-TODOLIST', id\r\n} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n} as const)\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({\r\n    type: 'SET-TODOLISTS', todolists\r\n} as const)\r\n\r\n//Thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    return todolistsAPI.getTodolists()\r\n        .then(res => dispatch(setTodolistsAC(res.data)))\r\n}\r\nexport const deleteTodolistTC = (id: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.deleteTodolist(id)\r\n        .then(() => dispatch(removeTodolistAC(id)))\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTodolist(title)\r\n        .then(res => dispatch(addTodolistAC(res.data.data.item)))\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.updateTodolist(id, title)\r\n        .then(() => dispatch(changeTodolistTitleAC(id, title)))\r\n}\r\n\r\n//Types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType }\r\ntype ActionsType =\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n","import {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)\r\n            }\r\n        case 'SET-TASK':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => ({\r\n    type: 'REMOVE-TASK', todolistId, taskId\r\n} as const)\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: 'ADD-TASK', task\r\n} as const)\r\nexport const updateTaskAC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskType) => ({\r\n    type: 'UPDATE-TASK', todolistId, taskId, domainModel\r\n} as const)\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => ({\r\n    type: 'SET-TASK', tasks, todolistId\r\n} as const)\r\n\r\n//Thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.getTasks(todolistId)\r\n        .then(res => dispatch(setTasksAC(res.data.items, todolistId)))\r\n}\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    todolistsAPI.createTask(todolistId, taskTitle)\r\n        .then(res => dispatch(addTaskAC(res.data.data.item)))\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    return todolistsAPI.deleteTask(todolistId, taskId)\r\n        .then(() => dispatch(removeTaskAC(todolistId, taskId)))\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskType) =>\r\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                status: task.status,\r\n                title: task.title,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...domainModel\r\n            }\r\n            todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then(() => dispatch(updateTaskAC(todolistId, taskId, domainModel)))\r\n        }\r\n    }\r\n\r\n//Types\r\nexport type UpdateDomainTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {[key: string]: TaskType[]}\r\ntype ActionsType =\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n}\r\n\r\nexport const AddItemForm = React.memo(function(props: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItem = () => {\r\n        if (title.trim() !== \"\") {\r\n            props.addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItem();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItem}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id),\r\n        [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.todolistId, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.todolistId, props.task.id, newValue)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    id: string\r\n    title: string\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    filter: FilterValuesType\r\n\r\n}\r\n\r\nexport const Todolist = React.memo((props: PropsType) => {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTasksTC(props.id))\r\n    }, [dispatch, props.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.id)\r\n    }, [props.addTask, props.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.id, title)\r\n    }, [props.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.id), [props.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.id), [props.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.id), [props.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    deleteTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\n\r\nexport const TodolistsList: React.FC = () => {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(todolistId, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTask = useCallback(function (todolistId: string, taskId: string) {\r\n        const thunk = removeTaskTC(todolistId, taskId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback(function (todolistId: string, taskId: string, status: TaskStatuses) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {status})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback(function (todolistId: string, taskId: string, title: string) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = deleteTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    id={tl.id}\r\n                                    title={tl.title}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    filter={tl.filter}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}","import React from 'react'\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\n\r\nexport const App: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './app/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App/>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}