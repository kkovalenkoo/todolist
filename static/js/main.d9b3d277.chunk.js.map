{"version":3,"sources":["Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","onAddTask","trim","addTask","todolistId","isShowButtonAll","filter","isShowButtonActive","isShowButtonComplete","onClick","removeTodolist","value","onChange","e","currentTarget","onKeyPress","key","className","tasks","map","t","id","isDone","type","checked","changeTaskStatus","removeTask","changeFilter","App","todolistId1","v1","todolistId2","todolists","setTodolists","setTasks","newTaskTitle","newTask","todolistTasks","taskId","filterValue","todolist","find","tl","task","allTodolistTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.d9b3d277.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {FilterType, TaskType} from './App'\r\n\r\ntype TodolistPropsType = {\r\n    todolistId: string\r\n    title: string\r\n    filter: FilterType\r\n    tasks: TaskType[]\r\n    addTask: (newTaskTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    changeFilter: (filterValue: FilterType, todolistId: string) => void\r\n    changeTaskStatus: (taskId: string, isDone: boolean, todolistId: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n}\r\n\r\nexport function Todolist(props: TodolistPropsType) {\r\n\r\n    const [title, setTitle] = useState<string>('')\r\n    const [error, setError] = useState<string | null>(null)\r\n\r\n    const onAddTask = () => {\r\n        if (title.trim() != '') {\r\n            props.addTask(title, props.todolistId)\r\n            setTitle('')\r\n        } else {\r\n            setError('Title is required')\r\n        }\r\n    }\r\n    const onChangeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        setError(null)\r\n        if (e.key === 'Enter') {\r\n            onAddTask()\r\n        }\r\n    }\r\n    const onClickAll = () => {\r\n        props.changeFilter('all', props.todolistId)\r\n    }\r\n    const onClickActive = () => {\r\n        props.changeFilter('active', props.todolistId)\r\n    }\r\n    const onClickCompleted = () => {\r\n        props.changeFilter('completed', props.todolistId)\r\n    }\r\n\r\n    const isShowButtonAll = props.filter === 'all' ? 'active-filter' : ''\r\n    const isShowButtonActive = props.filter === 'active' ? 'active-filter' : ''\r\n    const isShowButtonComplete = props.filter === 'completed' ? 'active-filter' : ''\r\n\r\n    return (\r\n        <div>\r\n            <h3>{props.title}\r\n                <button onClick={() => props.removeTodolist(props.todolistId)}>x</button>\r\n            </h3>\r\n            <div>\r\n                <input value={title} onChange={onChangeTitle} onKeyPress={onKeyPress}/>\r\n                <button onClick={onAddTask}>+</button>\r\n                {error && <div className={'error-message'}>{error}</div>}\r\n            </div>\r\n            <ul>\r\n                {\r\n                    props.tasks.map(t => {\r\n\r\n                        const onRemoveTask = () => {\r\n                            props.removeTask(t.id, props.todolistId)\r\n                        }\r\n                        const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n                            props.changeTaskStatus(t.id, e.currentTarget.checked, props.todolistId)\r\n                        }\r\n\r\n                        return (\r\n                            <li key={t.id} className={t.isDone ? 'is-done' : ''}>\r\n                                <input type=\"checkbox\" checked={t.isDone} onChange={onChangeStatus}/>\r\n                                <span>{t.title}</span>\r\n                                <button onClick={onRemoveTask}>x</button>\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n            <div>\r\n                <button className={isShowButtonAll} onClick={onClickAll}>All</button>\r\n                <button className={isShowButtonActive} onClick={onClickActive}>Active</button>\r\n                <button className={isShowButtonComplete} onClick={onClickCompleted}>Completed</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useState} from 'react'\r\nimport './App.css'\r\nimport {Todolist} from './Todolist'\r\nimport {v1} from 'uuid'\r\n\r\nexport type TodolistType = {\r\n    id: string,\r\n    title: string,\r\n    filter: FilterType\r\n}\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\nexport type TaskStateType = {\r\n    [key: string]: TaskType[]\r\n}\r\nexport type FilterType = 'all' | 'active' | 'completed'\r\n\r\nfunction App() {\r\n\r\n    const todolistId1 = v1()\r\n    const todolistId2 = v1()\r\n\r\n    const [todolists, setTodolists] = useState<TodolistType[]>([\r\n        {id: todolistId1, title: 'What to learn', filter: 'all'},\r\n        {id: todolistId2, title: 'What to buy', filter: 'all'}\r\n    ])\r\n    const [tasks, setTasks] = useState<TaskStateType>({\r\n            [todolistId1]: [\r\n                {id: v1(), title: 'HTML&CSS', isDone: true},\r\n                {id: v1(), title: 'JS', isDone: true},\r\n                {id: v1(), title: 'React', isDone: false}\r\n            ],\r\n            [todolistId2]: [\r\n                {id: v1(), title: 'Milk', isDone: true},\r\n                {id: v1(), title: 'Book', isDone: true},\r\n                {id: v1(), title: 'Pen', isDone: false}\r\n            ]\r\n        }\r\n    )\r\n\r\n    const addTask = (newTaskTitle: string, todolistId: string) => {\r\n        const newTask: TaskType = {id: v1(), title: newTaskTitle, isDone: false}\r\n        const todolistTasks = tasks[todolistId]\r\n        tasks[todolistId] = [newTask, ...todolistTasks]\r\n        setTasks({...tasks})\r\n    }\r\n    const removeTask = (taskId: string, todolistId: string) => {\r\n        const todolistTasks = tasks[todolistId]\r\n        tasks[todolistId] = todolistTasks.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n    const changeFilter = (filterValue: FilterType, todolistId: string) => {\r\n        const todolist = todolists.find(tl => tl.id === todolistId)\r\n        if (todolist) {\r\n            todolist.filter = filterValue\r\n            setTodolists([...todolists])\r\n        }\r\n    }\r\n    const changeTaskStatus = (taskId: string, isDone: boolean, todolistId: string) => {\r\n        const todolistTasks = tasks[todolistId]\r\n        const task = todolistTasks.find(t => t.id === taskId)\r\n        if (task) {\r\n            task.isDone = isDone\r\n            setTasks({...tasks})\r\n        }\r\n    }\r\n\r\n    const removeTodolist = (todolistId: string) => {\r\n        setTodolists(todolists.filter(tl => tl.id !== todolistId))\r\n        delete tasks[todolistId]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {todolists.map(tl => {\r\n\r\n                let allTodolistTasks = tasks[tl.id]\r\n                let todolistTasks = allTodolistTasks\r\n\r\n                if (tl.filter === 'active') todolistTasks = allTodolistTasks.filter(t => !t.isDone)\r\n                if (tl.filter === 'completed') todolistTasks = allTodolistTasks.filter(t => t.isDone)\r\n\r\n                return <Todolist key={tl.id}\r\n                                 todolistId={tl.id}\r\n                                 title={tl.title}\r\n                                 filter={tl.filter}\r\n                                 tasks={todolistTasks}\r\n                                 addTask={addTask}\r\n                                 removeTask={removeTask}\r\n                                 changeFilter={changeFilter}\r\n                                 changeTaskStatus={changeTaskStatus}\r\n                                 removeTodolist={removeTodolist}\r\n                />\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}