{"version":3,"sources":["api/api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","delete","get","todolistAPI","title","id","put","taskAPI","todolistId","taskId","model","handleServerError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","authReducer","reducer","actions","isInitialized","setAppInitializedAC","appReducer","addTodolistAC","unshift","todolist","filter","removeTodolistAC","index","findIndex","tl","splice","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistStatusAC","setTodolistsAC","todolists","map","todolistsReducer","removeTaskAC","tasks","t","addTaskAC","task","todoListId","updateTaskAC","domainModel","setTasksAC","extraReducers","builder","addCase","forEach","tasksReducer","updateTaskTC","getState","find","apiModel","description","priority","startDate","deadline","then","res","resultCode","catch","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","auth","thunk","taskTitle","item","addTaskTC","removeTaskTC","changeStatus","addTodolist","addTodolistTC","deleteTodolistTC","changeTodolistTitleTC","Grid","container","padding","spacing","allTodolistTasks","Paper","replace","to","Alert","elevation","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","header","Typography","linearProgress","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.17e49a80.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8984ca38-6e26-4fb2-a385-4373d690c5de'\r\n    }\r\n})\r\n\r\n//API\r\nexport const authAPI = {\r\n    login(data: LoginDataType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    }\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    }\r\n}\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n//Types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    else dispatch(setAppErrorAC({error: 'some error'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'some error'}))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginDataType} from '../../api/api'\r\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'auth',\r\n    initialState,\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ isLoggedIn: boolean }>) {\r\n            state.isLoggedIn = action.payload.isLoggedIn\r\n        },\r\n    }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n//Thunks\r\nexport const loginTC = (data: LoginDataType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC({isLoggedIn: false}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            } else {\r\n                handleServerError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//Types\r\nexport type AuthType = typeof initialState\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    status: 'idle' as StatusType,\r\n    error: null as ErrorType,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: StatusType }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: ErrorType }>) {\r\n            state.error = action.payload.error\r\n        },\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppInitializedAC, setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n//Thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) dispatch(setIsLoggedInAC({isLoggedIn: true}))\r\n        })\r\n    dispatch(setAppInitializedAC({isInitialized: true}))\r\n}\r\n\r\n//Types\r\nexport type AppStateType = typeof initialState\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\n","import {todolistAPI, TodolistType} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppStatusAC, StatusType} from '../../app/app-reducer'\r\nimport {handleNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolists',\r\n    initialState,\r\n    reducers: {\r\n        addTodolistAC(state, action: PayloadAction<{ todolist: TodolistType }>) {\r\n            state.unshift({...action.payload.todolist, filter: 'all', status: 'idle'})\r\n        },\r\n        removeTodolistAC(state, action: PayloadAction<{ id: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) state.splice(index, 1)\r\n        },\r\n        changeTodolistTitleAC(state, action: PayloadAction<{ id: string, title: string }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].title = action.payload.title\r\n        },\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistStatusAC(state, action: PayloadAction<{ id: string, status: StatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].status = action.payload.status\r\n        },\r\n        setTodolistsAC(state, action: PayloadAction<{ todolists: TodolistType[] }>) {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', status: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    addTodolistAC,\r\n    setTodolistsAC,\r\n    removeTodolistAC,\r\n    changeTodolistTitleAC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistStatusAC\r\n} = slice.actions\r\n\r\n//Thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    return todolistAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(setTodolistsAC({todolists: res.data}))\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTodolistTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistStatusAC({id, status: 'loading'}))\r\n    todolistAPI.deleteTodolist(id)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(removeTodolistAC({id}))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodolist(id, title)\r\n        .then(() => dispatch(changeTodolistTitleAC({id, title})))\r\n}\r\n\r\n//Types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, status: StatusType }","import {taskAPI, TaskPriorities, TaskStatuses, TaskType, UpdateTaskModelType} from '../../api/api'\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from '@reduxjs/toolkit'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {\r\n        removeTaskAC(state, action: PayloadAction<{ todolistId: string, taskId: string }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) tasks.splice(index, 1)\r\n        },\r\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\r\n            const tasks = state[action.payload.task.todoListId]\r\n            tasks.unshift(action.payload.task)\r\n        },\r\n        updateTaskAC(state, action: PayloadAction<{ todolistId: string, taskId: string, domainModel: UpdateDomainTaskType }>) {\r\n            const tasks = state[action.payload.todolistId]\r\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\r\n            if (index > -1) {\r\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\r\n            }\r\n        },\r\n        setTasksAC(state, action: PayloadAction<{ tasks: TaskType[], todolistId: string }>) {\r\n            state[action.payload.todolistId] = action.payload.tasks\r\n        }\r\n    },\r\n    extraReducers(builder) {\r\n        builder.addCase(addTodolistAC, (state, action) => {\r\n            state[action.payload.todolist.id] = []\r\n        })\r\n        builder.addCase(removeTodolistAC, (state, action) => {\r\n            delete state[action.payload.id]\r\n        })\r\n        builder.addCase(setTodolistsAC, (state, action) => {\r\n            action.payload.todolists.forEach(tl => {\r\n                state[tl.id] = []\r\n            })\r\n        })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC} = slice.actions\r\n\r\n//Thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    taskAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            dispatch(setTasksAC({tasks: res.data.items, todolistId}))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    taskAPI.createTask(todolistId, taskTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                dispatch(addTaskAC({task: res.data.data.item}))\r\n            } else {\r\n                handleServerError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    return taskAPI.deleteTask(todolistId, taskId)\r\n        .then(() => dispatch(removeTaskAC({todolistId, taskId})))\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                status: task.status,\r\n                title: task.title,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...domainModel\r\n            }\r\n            taskAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) dispatch(updateTaskAC({todolistId, taskId, domainModel}))\r\n                    else {\r\n                        handleServerError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    handleNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//Types\r\nexport type UpdateDomainTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = { [key: string]: TaskType[] }\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/api'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id),\r\n        [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.todolistId, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.todolistId, props.task.id, newValue)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.status === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.status === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}>All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n//Type\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    deleteTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(todolistId, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTask = useCallback(function (todolistId: string, taskId: string) {\r\n        const thunk = removeTaskTC(todolistId, taskId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback(function (todolistId: string, taskId: string, status: TaskStatuses) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {status})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback(function (todolistId: string, taskId: string, title: string) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = deleteTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Navigate replace to={'/login'}/>\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\n//Type\r\ntype TodolistsListPropsType = { demo?: boolean }","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../app/store'\r\nimport {ErrorType, setAppErrorAC} from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, ErrorType>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            if (!values.email) return {email: 'Email is required'}\r\n            if (!values.password) return {password: 'Password is required'}\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (isLoggedIn) return <Navigate replace to={'/todolist'}/>\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}/>\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}/>\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                               checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {BrowserRouter, Route, Routes} from 'react-router-dom'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, StatusType} from './app-reducer'\r\nimport style from './App.module.css'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\nexport const App: React.FC<AppPropsType> = ({demo = false}) => {\r\n\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) return <LinearProgress color=\"secondary\"/>\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <div className={style.header}>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </div>\r\n                </Toolbar>\r\n                <ErrorSnackbar/>\r\n            </AppBar>\r\n            {status === 'loading' &&\r\n            <div className={style.linearProgress}>\r\n                <LinearProgress color=\"secondary\"/>\r\n            </div>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/todolist\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n//Type\r\nexport type AppPropsType = { demo?: boolean }","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {configureStore} from '@reduxjs/toolkit'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: getDefaultMiddleware => getDefaultMiddleware().prepend(thunkMiddleware)\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport {App} from './app/App'\nimport {Provider} from 'react-redux'\nimport {store} from './app/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBarWrapper\":\"App_appBarWrapper__1YaDO\",\"linearProgress\":\"App_linearProgress__3BkLP\",\"header\":\"App_header__3Yfkh\"};"],"sourceRoot":""}