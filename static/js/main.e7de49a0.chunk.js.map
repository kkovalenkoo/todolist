{"version":3,"sources":["api/api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm.tsx","components/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","app/App.module.css"],"names":["TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","delete","get","todolistAPI","title","id","put","taskAPI","todolistId","taskId","model","handleServerError","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","type","status","isInitialized","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","description","priority","startDate","deadline","then","res","resultCode","updateTaskAC","catch","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","value","onChange","e","currentTarget","onKeyPress","key","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","todolist","setTasksAC","items","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","filter","removeTodolist","map","style","paddingTop","Button","TodolistsList","todolists","useSelector","state","auth","thunk","taskTitle","item","addTaskTC","removeTaskAC","removeTaskTC","changeStatus","addTodolist","addTodolistTC","changeTodolistStatusAC","removeTodolistAC","deleteTodolistTC","changeTodolistTitleAC","changeTodolistTitleTC","action","Grid","container","padding","spacing","tl","allTodolistTasks","Paper","replace","to","Alert","elevation","ErrorSnackbar","app","isOpen","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","header","Typography","linearProgress","LinearProgress","Container","fixed","path","element","rootReducer","combineReducers","todoListId","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","window","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.e7de49a0.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8984ca38-6e26-4fb2-a385-4373d690c5de'\r\n    }\r\n})\r\n\r\n//API\r\nexport const authAPI = {\r\n    login(data: LoginDataType) {\r\n        return instance.post<ResponseType<{ userId?: number }>>('auth/login', data)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType<{ userId?: number }>>('auth/login')\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n    }\r\n}\r\nexport const todolistAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists')\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title})\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`)\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseType>(`todo-lists/${id}`, {title})\r\n    }\r\n}\r\nexport const taskAPI = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`)\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<ResponseType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title})\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n    }\r\n}\r\n\r\n//Types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: string[]\r\n    data: D\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\nexport type LoginDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n","import {setAppErrorAC, setAppStatusAC} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerError = <D>(data: ResponseType<D>, dispatch: Dispatch) => {\r\n    if (data.messages.length) dispatch(setAppErrorAC(data.messages[0]))\r\n    else dispatch(setAppErrorAC('some error'))\r\n    dispatch(setAppStatusAC('failed'))\r\n}\r\n\r\nexport const handleNetworkError = (error: {message: string}, dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('failed'))\r\n    dispatch(setAppErrorAC(error.message ? error.message : 'some error'))\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI, LoginDataType} from '../../api/api'\r\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\n\r\nconst initialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const authReducer = (state: AuthType = initialState, action: ActionsType): AuthType => {\r\n    switch (action.type) {\r\n        case 'LOGIN/SET-IS-LOGGED-IN':\r\n            return {...state, isLoggedIn: action.isLoggedIn}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const setIsLoggedInAC = (isLoggedIn: boolean) => ({\r\n    type: 'LOGIN/SET-IS-LOGGED-IN', isLoggedIn\r\n} as const)\r\n\r\n//Thunks\r\nexport const loginTC = (data: LoginDataType) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.login(data)\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(true))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const logoutTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    authAPI.logout()\r\n        .then((res) => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setIsLoggedInAC(false))\r\n                dispatch(setAppStatusAC('succeeded'))\r\n            } else {\r\n                handleServerError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\n\r\n//Types\r\nexport type AuthType = typeof initialState\r\ntype ActionsType =\r\n    | ReturnType<typeof setIsLoggedInAC>\r\n\r\n\r\n\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\n\r\nconst initialState = {\r\n    status: 'idle' as StatusType,\r\n    error: null as ErrorType,\r\n    isInitialized: false\r\n}\r\n\r\nexport const appReducer = (state: AppStateType = initialState, action: ActionsType): AppStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, error: action.error}\r\n        case 'APP/SET-IS-INITIALIZED':\r\n            return {...state, isInitialized: action.isInitialized}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const setAppErrorAC = (error: ErrorType) => ({type: 'APP/SET-ERROR', error} as const)\r\nexport const setAppStatusAC = (status: StatusType) => ({type: 'APP/SET-STATUS', status} as const)\r\nexport const setAppInitializedAC = (isInitialized: boolean) => ({\r\n    type: 'APP/SET-IS-INITIALIZED',\r\n    isInitialized\r\n} as const)\r\n\r\n//Thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n    authAPI.me()\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) dispatch(setIsLoggedInAC(true))\r\n        })\r\n    dispatch(setAppInitializedAC(true))\r\n}\r\n\r\n//Types\r\nexport type AppStateType = typeof initialState\r\nexport type StatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type ErrorType = string | null\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import {todolistAPI, TodolistType} from '../../api/api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppStatusAC, StatusType} from '../../app/app-reducer'\r\nimport {handleNetworkError} from '../../utils/error-utils'\r\n\r\nconst initialState: TodolistDomainType[] = []\r\n\r\nexport const todolistsReducer = (state: TodolistDomainType[] = initialState, action: ActionsType): TodolistDomainType[] => {\r\n    switch (action.type) {\r\n        case 'ADD-TODOLIST':\r\n            return [{...action.todolist, filter: 'all', status: 'idle'}, ...state]\r\n        case 'REMOVE-TODOLIST':\r\n            return state.filter(tl => tl.id !== action.id)\r\n        case 'CHANGE-TODOLIST-TITLE':\r\n            return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n        case 'CHANGE-TODOLIST-FILTER':\r\n            return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n        case 'CHANGE-TODOLIST-STATUS':\r\n            return state.map(tl => tl.id === action.id ? {...tl, status: action.status} : tl)\r\n        case 'SET-TODOLISTS':\r\n            return action.todolists.map(tl => ({...tl, filter: 'all', status: 'idle'}))\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const addTodolistAC = (todolist: TodolistType) => ({\r\n    type: 'ADD-TODOLIST', todolist\r\n} as const)\r\nexport const removeTodolistAC = (id: string) => ({\r\n    type: 'REMOVE-TODOLIST', id\r\n} as const)\r\nexport const changeTodolistTitleAC = (id: string, title: string) => ({\r\n    type: 'CHANGE-TODOLIST-TITLE', id, title\r\n} as const)\r\nexport const changeTodolistFilterAC = (id: string, filter: FilterValuesType) => ({\r\n    type: 'CHANGE-TODOLIST-FILTER', id, filter\r\n} as const)\r\nexport const changeTodolistStatusAC = (id: string, status: StatusType) => ({\r\n    type: 'CHANGE-TODOLIST-STATUS', id, status\r\n} as const)\r\nexport const setTodolistsAC = (todolists: TodolistType[]) => ({\r\n    type: 'SET-TODOLISTS', todolists\r\n} as const)\r\n\r\n//Thunks\r\nexport const fetchTodolistsTC = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    return todolistAPI.getTodolists()\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTodolistsAC(res.data))\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const deleteTodolistTC = (id: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    dispatch(changeTodolistStatusAC(id, 'loading'))\r\n    todolistAPI.deleteTodolist(id)\r\n        .then(() => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(removeTodolistAC(id))\r\n        })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolist(title)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(addTodolistAC(res.data.data.item))\r\n        })\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => (dispatch: Dispatch) => {\r\n    todolistAPI.updateTodolist(id, title)\r\n        .then(() => dispatch(changeTodolistTitleAC(id, title)))\r\n}\r\n\r\n//Types\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, status: StatusType }\r\ntype ActionsType =\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | ReturnType<typeof changeTodolistStatusAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n","import {taskAPI, TaskPriorities, TaskStatuses, TaskType, todolistAPI, UpdateTaskModelType} from '../../api/api'\r\nimport {addTodolistAC, removeTodolistAC, setTodolistsAC} from './todolists-reducer'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleNetworkError, handleServerError} from '../../utils/error-utils'\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nexport const tasksReducer = (state: TasksStateType = initialState, action: ActionsType): TasksStateType => {\r\n    switch (action.type) {\r\n        case 'ADD-TASK':\r\n            return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n        case 'REMOVE-TASK':\r\n            return {...state, [action.todolistId]: state[action.todolistId].filter(t => t.id !== action.taskId)}\r\n        case 'UPDATE-TASK':\r\n            return {\r\n                ...state,\r\n                [action.todolistId]: state[action.todolistId]\r\n                    .map(t => t.id === action.taskId ? {...t, ...action.domainModel} : t)\r\n            }\r\n        case 'SET-TASK':\r\n            return {...state, [action.todolistId]: action.tasks}\r\n        case 'ADD-TODOLIST':\r\n            return {...state, [action.todolist.id]: []}\r\n        case 'REMOVE-TODOLIST': {\r\n            const stateCopy = {...state}\r\n            delete stateCopy[action.id]\r\n            return stateCopy\r\n        }\r\n        case 'SET-TODOLISTS': {\r\n            const stateCopy = {...state}\r\n            action.todolists.forEach(tl => {\r\n                stateCopy[tl.id] = []\r\n            })\r\n            return stateCopy\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n//Actions\r\nexport const removeTaskAC = (todolistId: string, taskId: string) => ({\r\n    type: 'REMOVE-TASK', todolistId, taskId\r\n} as const)\r\nexport const addTaskAC = (task: TaskType) => ({\r\n    type: 'ADD-TASK', task\r\n} as const)\r\nexport const updateTaskAC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskType) => ({\r\n    type: 'UPDATE-TASK', todolistId, taskId, domainModel\r\n} as const)\r\nexport const setTasksAC = (tasks: TaskType[], todolistId: string) => ({\r\n    type: 'SET-TASK', tasks, todolistId\r\n} as const)\r\n\r\n//Thunks\r\nexport const fetchTasksTC = (todolistId: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.getTasks(todolistId)\r\n        .then(res => {\r\n            dispatch(setAppStatusAC('succeeded'))\r\n            dispatch(setTasksAC(res.data.items, todolistId))\r\n        })\r\n}\r\nexport const addTaskTC = (todolistId: string, taskTitle: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatusAC('loading'))\r\n    taskAPI.createTask(todolistId, taskTitle)\r\n        .then(res => {\r\n            if (res.data.resultCode === 0) {\r\n                dispatch(setAppStatusAC('succeeded'))\r\n                dispatch(addTaskAC(res.data.data.item))\r\n            } else {\r\n                handleServerError(res.data, dispatch)\r\n            }\r\n        })\r\n        .catch(error => {\r\n            handleNetworkError(error, dispatch)\r\n        })\r\n}\r\nexport const removeTaskTC = (todolistId: string, taskId: string) => (dispatch: Dispatch) => {\r\n    return taskAPI.deleteTask(todolistId, taskId)\r\n        .then(() => dispatch(removeTaskAC(todolistId, taskId)))\r\n}\r\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskType) =>\r\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n        const state = getState()\r\n        const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n        if (task) {\r\n            const apiModel: UpdateTaskModelType = {\r\n                status: task.status,\r\n                title: task.title,\r\n                description: task.description,\r\n                priority: task.priority,\r\n                startDate: task.startDate,\r\n                deadline: task.deadline,\r\n                ...domainModel\r\n            }\r\n            taskAPI.updateTask(todolistId, taskId, apiModel)\r\n                .then((res) => {\r\n                    if (res.data.resultCode === 0) dispatch(updateTaskAC(todolistId, taskId, domainModel))\r\n                    else {\r\n                        handleServerError(res.data, dispatch)\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    handleNetworkError(error, dispatch)\r\n                })\r\n        }\r\n    }\r\n\r\n//Types\r\nexport type UpdateDomainTaskType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = { [key: string]: TaskType[] }\r\ntype ActionsType =\r\n    | ReturnType<typeof addTaskAC>\r\n    | ReturnType<typeof removeTaskAC>\r\n    | ReturnType<typeof setTasksAC>\r\n    | ReturnType<typeof updateTaskAC>\r\n    | ReturnType<typeof addTodolistAC>\r\n    | ReturnType<typeof removeTodolistAC>\r\n    | ReturnType<typeof setTodolistsAC>\r\n    | ReturnType<typeof setAppErrorAC>\r\n    | ReturnType<typeof setAppStatusAC>\r\n\r\n\r\n\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react'\r\nimport {IconButton, TextField} from '@material-ui/core'\r\nimport {AddBox} from '@material-ui/icons'\r\n\r\nexport type AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.key === 'Enter') {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\nexport type EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/api'\r\n\r\nexport type TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n\r\n    const onClickHandler = useCallback(() => props.removeTask(props.todolistId, props.task.id),\r\n        [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.todolistId, props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.todolistId, props.task.id, newValue)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\nexport const Todolist = React.memo(({demo = false, ...props}: TodolistPropsType) => {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo) return\r\n        dispatch(fetchTasksTC(props.todolist.id))\r\n    }, [dispatch, props.todolist.id])\r\n\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.status === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.status === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}>All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n//Type\r\ntype TodolistPropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    addTask: (title: string, todolistId: string) => void\r\n    removeTask: (todolistId: string, taskId: string) => void\r\n    changeTaskStatus: (todolistId: string, taskId: string, status: TaskStatuses) => void\r\n    changeTaskTitle: (todolistId: string, taskId: string, newTitle: string) => void\r\n    removeTodolist: (todolistId: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    demo?: boolean\r\n}\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    deleteTodolistTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const TodolistsList: React.FC<TodolistsListPropsType> = ({demo = false}) => {\r\n\r\n    const todolists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) return\r\n        dispatch(fetchTodolistsTC())\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC(todolistId, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTask = useCallback(function (todolistId: string, taskId: string) {\r\n        const thunk = removeTaskTC(todolistId, taskId)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeStatus = useCallback(function (todolistId: string, taskId: string, status: TaskStatuses) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {status})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTaskTitle = useCallback(function (todolistId: string, taskId: string, title: string) {\r\n        const thunk = updateTaskTC(todolistId, taskId, {title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = deleteTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC(todolistId, value)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) return <Navigate replace to={'/login'}/>\r\n\r\n    return (\r\n        <>\r\n            <Grid container style={{padding: '20px'}}>\r\n                <AddItemForm addItem={addTodolist}/>\r\n            </Grid>\r\n            <Grid container spacing={3}>\r\n                {\r\n                    todolists.map(tl => {\r\n                        let allTodolistTasks = tasks[tl.id]\r\n\r\n                        return <Grid item key={tl.id}>\r\n                            <Paper style={{padding: '10px'}}>\r\n                                <Todolist\r\n                                    todolist={tl}\r\n                                    demo={demo}\r\n                                    tasks={allTodolistTasks}\r\n                                    removeTask={removeTask}\r\n                                    changeFilter={changeFilter}\r\n                                    addTask={addTask}\r\n                                    changeTaskStatus={changeStatus}\r\n                                    removeTodolist={removeTodolist}\r\n                                    changeTaskTitle={changeTaskTitle}\r\n                                    changeTodolistTitle={changeTodolistTitle}\r\n                                />\r\n                            </Paper>\r\n                        </Grid>\r\n                    })\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n\r\n//Type\r\ntype TodolistsListPropsType = { demo?: boolean }","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../app/store'\r\nimport {ErrorType, setAppErrorAC} from '../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport const ErrorSnackbar = () => {\r\n\r\n    const error = useSelector<AppRootStateType, ErrorType>(state => state.app.error)\r\n    const dispatch = useDispatch()\r\n    const isOpen = error !== null\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC(null))\r\n    }\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport {Button, Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, Grid, TextField} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {Navigate} from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: values => {\r\n            if (!values.email) return {email: 'Email is required'}\r\n            if (!values.password) return {password: 'Password is required'}\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values))\r\n        },\r\n    })\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    if (isLoggedIn) return <Navigate replace to={'/todolist'}/>\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('email')}/>\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps('password')}/>\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox {...formik.getFieldProps('rememberMe')}\r\n                                               checked={formik.values.rememberMe}/>}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {BrowserRouter, Route, Routes} from 'react-router-dom'\r\nimport {AppBar, Button, Container, IconButton, LinearProgress, Toolbar, Typography} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, StatusType} from './app-reducer'\r\nimport style from './App.module.css'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\nexport const App: React.FC<AppPropsType> = ({demo = false}) => {\r\n\r\n    const status = useSelector<AppRootStateType, StatusType>(state => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>(state => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [dispatch])\r\n\r\n    if (!isInitialized) return <LinearProgress color=\"secondary\"/>\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <AppBar position=\"relative\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <div className={style.header}>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </div>\r\n                </Toolbar>\r\n                <ErrorSnackbar/>\r\n            </AppBar>\r\n            {status === 'loading' &&\r\n            <div className={style.linearProgress}>\r\n                <LinearProgress color=\"secondary\"/>\r\n            </div>}\r\n            <Container fixed>\r\n                <Routes>\r\n                    <Route path=\"/login\" element={<Login/>}/>\r\n                    <Route path=\"/todolist\" element={<TodolistsList demo={demo}/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n//Type\r\nexport type AppPropsType = { demo?: boolean }","import {tasksReducer} from '../features/TodolistsList/tasks-reducer'\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer'\r\nimport {applyMiddleware, combineReducers, createStore} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware))\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport {App} from './app/App'\nimport {Provider} from 'react-redux'\nimport {store} from './app/store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n)\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appBarWrapper\":\"App_appBarWrapper__1YaDO\",\"linearProgress\":\"App_linearProgress__3BkLP\",\"header\":\"App_header__3Yfkh\"};"],"sourceRoot":""}